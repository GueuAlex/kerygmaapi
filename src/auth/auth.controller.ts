import {
  Controller,
  Post,
  Body,
  HttpCode,
  HttpStatus,
  Get,
  Request,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBody,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { LoginDto, RegisterDto, AuthResponseDto } from './dto/auth.dto';
import {
  ForgotPasswordDto,
  VerifyOtpDto,
  ResetPasswordDto,
} from './dto/forgot-password.dto';
import { Public } from './decorators/public.decorator';

@ApiTags('Authentification')
@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Public()
  @Post('register')
  @ApiOperation({
    summary: "Inscription d'un nouvel utilisateur",
    description: `
Cr√©e un nouveau compte utilisateur dans le syst√®me DIGIFAZ.

**Processus d'inscription :**
1. Validation des donn√©es (email unique, mot de passe s√©curis√©)
2. Hash du mot de passe avec bcryptjs
3. Cr√©ation de l'utilisateur avec le r√¥le 'user' par d√©faut
4. G√©n√©ration automatique d'un token JWT
5. Retour des informations utilisateur + token

**R√¥le par d√©faut :** \`user\`  
**Statut par d√©faut :** \`active\`

**Exemple de test :**
\`\`\`json
{
  "fullName": "Jean Dupont",
  "email": "jean.dupont@example.com",
  "password": "motdepasse123",
  "phone": "+237690123456"
}
\`\`\`
    `,
  })
  @ApiBody({
    type: RegisterDto,
    examples: {
      example1: {
        summary: 'Inscription standard',
        description: "Exemple d'inscription d'un utilisateur standard",
        value: {
          fullName: 'Marie Nguema',
          email: 'marie.nguema@digifaz.com',
          password: 'motdepasse123',
          phone: '+237690123456',
        },
      },
      example2: {
        summary: 'Inscription minimale',
        description: 'Inscription avec les champs obligatoires uniquement',
        value: {
          fullName: 'Paul Biya',
          email: 'paul.biya@example.com',
          password: 'password123',
        },
      },
    },
  })
  @ApiResponse({
    status: 201,
    description:
      'Utilisateur cr√©√© avec succ√®s. Token JWT inclus pour connexion imm√©diate.',
    type: AuthResponseDto,
    example: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
      user: {
        id: 'uuid-1234-5678-9012',
        email: 'marie.nguema@digifaz.com',
        fullName: 'Marie Nguema',
        role: 'user',
        status: 'active',
      },
    },
  })
  @ApiResponse({
    status: 409,
    description: 'Un utilisateur avec cet email existe d√©j√†',
    example: {
      statusCode: 409,
      message: 'Un utilisateur avec cet email existe d√©j√†',
      error: 'Conflict',
    },
  })
  @ApiResponse({
    status: 400,
    description: "Donn√©es d'inscription invalides (validation √©chou√©e)",
    example: {
      statusCode: 400,
      message: [
        'Email invalide',
        'Mot de passe doit avoir au moins 6 caract√®res',
      ],
      error: 'Bad Request',
    },
  })
  async register(@Body() registerDto: RegisterDto): Promise<AuthResponseDto> {
    return this.authService.register(registerDto);
  }

  @Public()
  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Connexion utilisateur',
    description: `
Authentifie un utilisateur existant et retourne un token JWT.

**Processus de connexion :**
1. V√©rification de l'existence de l'utilisateur
2. Contr√¥le du statut du compte (actif/suspendu/inactif)
3. Validation du mot de passe avec bcryptjs
4. G√©n√©ration d'un nouveau token JWT
5. Retour des informations utilisateur + token

**Statuts de compte :**
- \`active\` : Connexion autoris√©e ‚úÖ
- \`inactive\` : Compte √† activer ‚ö†Ô∏è
- \`suspended\` : Compte suspendu ‚ùå
- \`guest\` : Acc√®s limit√© ‚ö†Ô∏è

**Dur√©e du token :** 24h par d√©faut

**Exemple de test :**
\`\`\`json
{
  "email": "marie.nguema@digifaz.com",
  "password": "motdepasse123"
}
\`\`\`
    `,
  })
  @ApiBody({
    type: LoginDto,
    examples: {
      user: {
        summary: 'Utilisateur standard',
        description: "Connexion d'un utilisateur standard",
        value: {
          email: 'test@test.com',
          password: 'P@ssword',
        },
      },
      admin: {
        summary: 'Administrateur',
        description: "Connexion d'un administrateur",
        value: {
          email: 'admin@digifaz.com',
          password: 'P@ssword',
        },
      },
    },
  })
  @ApiResponse({
    status: 200,
    description: 'Connexion r√©ussie. Token JWT valide retourn√©.',
    type: AuthResponseDto,
    example: {
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
      user: {
        id: 'uuid-1234-5678-9012',
        email: 'marie.nguema@digifaz.com',
        fullName: 'Marie Nguema',
        role: 'user',
        status: 'active',
      },
    },
  })
  @ApiResponse({
    status: 401,
    description: 'Email ou mot de passe incorrect, ou compte suspendu/inactif',
    example: {
      statusCode: 401,
      message: 'Email ou mot de passe incorrect',
      error: 'Unauthorized',
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Donn√©es de connexion invalides (validation √©chou√©e)',
    example: {
      statusCode: 400,
      message: ['Email invalide', 'Mot de passe requis'],
      error: 'Bad Request',
    },
  })
  async login(@Body() loginDto: LoginDto): Promise<AuthResponseDto> {
    return this.authService.login(loginDto);
  }

  @Get('profile')
  @ApiBearerAuth('JWT-auth')
  @ApiOperation({
    summary: 'Profil utilisateur connect√©',
    description: `
üîí **Endpoint prot√©g√©** - N√©cessite un token JWT valide

Retourne les informations du profil de l'utilisateur actuellement connect√©.

**Utilisation :**
1. Se connecter avec \`POST /auth/login\` pour obtenir un token
2. Ajouter le token dans le header : \`Authorization: Bearer <token>\`
3. Appeler cet endpoint pour r√©cup√©rer le profil

**Cas d'usage :**
- Affichage du profil utilisateur dans l'interface
- V√©rification de l'√©tat de la session
- R√©cup√©ration des r√¥les et permissions
- Test de l'authentification JWT

**Note :** Si le token est expir√© ou invalide, une erreur 401 sera retourn√©e.
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Profil utilisateur r√©cup√©r√© avec succ√®s',
    example: {
      userId: 'uuid-1234-5678-9012',
      email: 'marie.nguema@digifaz.com',
      role: 'user',
      fullName: 'Marie Nguema',
      iat: 1642000000,
      exp: 1642086400,
    },
  })
  @ApiResponse({
    status: 401,
    description: 'Token JWT manquant, invalide ou expir√©',
    example: {
      statusCode: 401,
      message: 'Unauthorized',
      error: 'Unauthorized',
    },
  })
  async getProfile(@Request() req: { user: any }) {
    return await this.authService.getProfile(req.user.userId);
  }

  @Public()
  @Post('forgot-password')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Demande de r√©initialisation de mot de passe',
    description: `
üîì **Endpoint public** - Accessible sans authentification

Initie le processus de r√©cup√©ration de mot de passe en envoyant un code OTP.

**Processus de s√©curit√© :**
1. V√©rification de l'existence de l'utilisateur
2. Invalidation des anciens codes non utilis√©s
3. G√©n√©ration d'un code OTP √† 6 chiffres (validit√© 10 minutes)
4. Envoi par SMS (priorit√©) ou email selon disponibilit√©

**Politique de s√©curit√© :**
- M√™me r√©ponse que l'email existe ou non (protection contre l'√©num√©ration)
- Un seul OTP actif par utilisateur √† la fois
- Expiration automatique apr√®s 10 minutes

**M√©thodes d'envoi (par priorit√©) :**
1. üì± SMS si num√©ro de t√©l√©phone disponible
2. üìß Email si pas de t√©l√©phone

**Exemple d'utilisation :**
\`\`\`json
{
  "email": "user@digifaz.com"
}
\`\`\`
    `,
  })
  @ApiResponse({
    status: 200,
    description: "Demande trait√©e (que l'email existe ou non)",
    example: {
      message: 'Si cet email existe, un code de v√©rification a √©t√© envoy√©',
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Email invalide (validation √©chou√©e)',
  })
  async forgotPassword(
    @Body() forgotPasswordDto: ForgotPasswordDto,
  ): Promise<{ message: string }> {
    return this.authService.forgotPassword(forgotPasswordDto);
  }

  @Public()
  @Post('verify-otp')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'V√©rification du code OTP',
    description: `
üîì **Endpoint public** - Accessible sans authentification

Valide le code OTP re√ßu et retourne un token de r√©initialisation temporaire.

**Processus de validation :**
1. V√©rification du code OTP (6 chiffres)
2. Contr√¥le de l'expiration (10 minutes max)
3. V√©rification du nombre de tentatives (5 max)
4. G√©n√©ration d'un token de r√©initialisation (validit√© 5 minutes)

**S√©curit√©s impl√©ment√©es :**
- Maximum 5 tentatives par OTP
- Token de r√©initialisation temporaire (5 minutes)
- Invalidation automatique apr√®s usage
- Protection contre le brute force

**√âtape suivante :**
Utiliser le \`resetToken\` re√ßu avec \`POST /auth/reset-password\`

**Exemple d'utilisation :**
\`\`\`json
{
  "email": "user@digifaz.com",
  "otp": "123456"
}
\`\`\`
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'OTP valid√© avec succ√®s, token de r√©initialisation fourni',
    example: {
      resetToken: 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6',
      message:
        'Code v√©rifi√©. Vous pouvez maintenant r√©initialiser votre mot de passe',
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Code OTP invalide, expir√© ou trop de tentatives',
  })
  async verifyOtp(
    @Body() verifyOtpDto: VerifyOtpDto,
  ): Promise<{ resetToken: string; message: string }> {
    return this.authService.verifyOtp(verifyOtpDto);
  }

  @Public()
  @Post('reset-password')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'R√©initialisation du mot de passe',
    description: `
üîì **Endpoint public** - Accessible sans authentification

Finalise la r√©initialisation du mot de passe avec le token temporaire.

**Processus de r√©initialisation :**
1. Validation du token de r√©initialisation (5 minutes max)
2. V√©rification de la correspondance des mots de passe
3. Application des r√®gles de complexit√©
4. Hachage s√©curis√© et mise √† jour
5. Invalidation du token utilis√©

**R√®gles de mot de passe :**
- Minimum 8 caract√®res, maximum 50
- Au moins 1 minuscule, 1 majuscule, 1 chiffre
- Au moins 1 caract√®re sp√©cial (@$!%*?&)

**S√©curit√©s :**
- Token √† usage unique (invalid√© apr√®s utilisation)
- Expiration rapide du token (5 minutes)
- Hachage bcrypt avec salt rounds √©lev√©

**Exemple d'utilisation :**
\`\`\`json
{
  "resetToken": "a1b2c3d4e5f6...",
  "newPassword": "NouveauMotDePasse123*",
  "confirmPassword": "NouveauMotDePasse123*"
}
\`\`\`
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Mot de passe r√©initialis√© avec succ√®s',
    example: {
      message: 'Mot de passe r√©initialis√© avec succ√®s',
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Token invalide/expir√© ou mots de passe non conformes',
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur non trouv√©',
  })
  async resetPassword(
    @Body() resetPasswordDto: ResetPasswordDto,
  ): Promise<{ message: string }> {
    return this.authService.resetPassword(resetPasswordDto);
  }
}
