import {
  Controller,
  Get,
  Put,
  Delete,
  Param,
  Body,
  Query,
  HttpCode,
  HttpStatus,
  Request,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { UsersService } from './users.service';
import { UpdateUserDto } from './dto/update-user.dto';
import { QueryUsersDto } from './dto/query-users.dto';
import { ChangePasswordDto } from './dto/change-password.dto';
import { UserResponseDto, UsersListResponseDto } from './dto/user-response.dto';
import { Permissions } from '../../auth/decorators/permissions.decorator';
import { UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';
import { PermissionsGuard } from '../../auth/guards/permissions.guard';

@ApiTags('Gestion des utilisateurs')
@ApiBearerAuth('JWT-auth')
@Controller('users')
@UseGuards(JwtAuthGuard, PermissionsGuard)
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Get()
  @Permissions.Users.Read()
  @ApiOperation({
    summary: 'Liste des utilisateurs avec filtres et pagination',
    description: `
üîí **Permission requise** : Lecture des utilisateurs

R√©cup√®re la liste des utilisateurs avec possibilit√© de :
- **Rechercher** par nom ou email
- **Filtrer** par r√¥le et statut
- **Paginer** les r√©sultats
- **Trier** par diff√©rents champs

**Cas d'usage :**
- Administration des utilisateurs
- Recherche d'utilisateurs sp√©cifiques
- Statistiques et rapports
- Gestion des r√¥les et permissions
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Liste des utilisateurs r√©cup√©r√©e avec succ√®s',
    type: UsersListResponseDto,
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© - R√¥le insuffisant',
  })
  async findAll(
    @Query() queryDto: QueryUsersDto,
  ): Promise<UsersListResponseDto> {
    return this.usersService.findAll(queryDto);
  }

  @Get('me')
  @ApiOperation({
    summary: "Profil de l'utilisateur connect√©",
    description: `
üîí **Endpoint prot√©g√©** - Accessible √† tous les utilisateurs connect√©s

Retourne les informations compl√®tes du profil de l'utilisateur actuellement connect√©.

**Cas d'usage :**
- Affichage du profil dans l'interface utilisateur
- R√©cup√©ration des permissions et r√¥les
- V√©rification de l'√©tat du compte
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Profil utilisateur r√©cup√©r√© avec succ√®s',
    type: UserResponseDto,
  })
  async getProfile(@Request() req: { user: any }): Promise<UserResponseDto> {
    return this.usersService.findOne(req.user.userId);
  }

  @Get('stats')
  @Permissions.Users.Read()
  @ApiOperation({
    summary: 'Statistiques des utilisateurs',
    description: `
üîí **Permission requise** : Lecture des utilisateurs

Retourne des statistiques d√©taill√©es sur les utilisateurs :
- Nombre total d'utilisateurs
- R√©partition par r√¥les
- R√©partition par statuts

**Cas d'usage :**
- Tableaux de bord administrateur
- Rapports statistiques
- Monitoring de la plateforme
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Statistiques r√©cup√©r√©es avec succ√®s',
    example: {
      total: 150,
      byRole: {
        admin: 5,
        priest: 12,
        parish_admin: 25,
        user: 108,
      },
      byStatus: {
        active: 140,
        inactive: 8,
        suspended: 2,
      },
    },
  })
  async getStats() {
    const [total, byRole, byStatus] = await Promise.all([
      this.usersService.count(),
      this.usersService.countByRole(),
      this.usersService.countByStatus(),
    ]);

    return { total, byRole, byStatus };
  }

  @Get(':id')
  @Permissions.Users.Read()
  @ApiOperation({
    summary: "D√©tails d'un utilisateur sp√©cifique",
    description: `
üîí **Permission requise** : Lecture des utilisateurs

R√©cup√®re les informations d√©taill√©es d'un utilisateur par son ID.

**Cas d'usage :**
- Consultation de profil utilisateur
- Mod√©ration et administration
- Support utilisateur
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Utilisateur trouv√© avec succ√®s',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur non trouv√©',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© - R√¥le insuffisant',
  })
  async findOne(@Param('id') id: string): Promise<UserResponseDto> {
    return this.usersService.findOne(id);
  }

  @Put('me')
  @ApiOperation({
    summary: 'Modifier son propre profil',
    description: `
üîí **Endpoint prot√©g√©** - Accessible √† tous les utilisateurs connect√©s

Permet √† un utilisateur de modifier ses propres informations :
- Nom complet
- Email (si unique)
- T√©l√©phone

**Restrictions :**
- Un utilisateur ne peut pas modifier son propre r√¥le
- Un utilisateur ne peut pas modifier son propre statut
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Profil mis √† jour avec succ√®s',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 409,
    description: 'Email d√©j√† utilis√© par un autre utilisateur',
  })
  async updateProfile(
    @Request() req: { user: any },
    @Body() updateUserDto: UpdateUserDto,
  ): Promise<UserResponseDto> {
    // Emp√™cher la modification du statut par l'utilisateur lui-m√™me
    const { status, ...allowedUpdates } = updateUserDto;
    return this.usersService.update(req.user.userId, allowedUpdates);
  }

  @Put('change-password')
  @ApiOperation({
    summary: 'Modifier son mot de passe',
    description: `
üîí **Endpoint prot√©g√©** - Accessible √† tous les utilisateurs connect√©s

Permet √† un utilisateur de modifier son propre mot de passe de mani√®re s√©curis√©e.

**Processus de s√©curisation :**
1. Validation de l'ancien mot de passe
2. V√©rification que le nouveau mot de passe est diff√©rent
3. Application des r√®gles de complexit√©
4. Hachage s√©curis√© du nouveau mot de passe

**R√®gles de complexit√© :**
- Minimum 8 caract√®res, maximum 50
- Au moins 1 minuscule, 1 majuscule, 1 chiffre
- Au moins 1 caract√®re sp√©cial (@$!%*?&)

**Cas d'usage :**
- Changement p√©riodique pour la s√©curit√©
- Mot de passe compromis ou oubli√©
- Conformit√© aux politiques de s√©curit√©
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Mot de passe modifi√© avec succ√®s',
    example: {
      message: 'Mot de passe modifi√© avec succ√®s',
    },
  })
  @ApiResponse({
    status: 400,
    description:
      'Erreur de validation (nouveaux mots de passe diff√©rents, m√™me mot de passe, etc.)',
  })
  @ApiResponse({
    status: 401,
    description: 'Mot de passe actuel incorrect',
  })
  async changePassword(
    @Request() req: { user: any },
    @Body() changePasswordDto: ChangePasswordDto,
  ): Promise<{ message: string }> {
    return this.usersService.changePassword(req.user.userId, changePasswordDto);
  }

  @Put(':id')
  @Permissions.Users.Write()
  @ApiOperation({
    summary: 'Modifier un utilisateur',
    description: `
üîí **Permission requise** : Lecture des utilisateurs

Permet √† un administrateur de modifier tous les aspects d'un utilisateur :
- Informations personnelles (nom, email, t√©l√©phone)
- R√¥le utilisateur
- Statut du compte

**Cas d'usage :**
- Administration des comptes utilisateurs
- Gestion des r√¥les et permissions
- Mod√©ration (suspension/activation)
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Utilisateur mis √† jour avec succ√®s',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur non trouv√©',
  })
  @ApiResponse({
    status: 409,
    description: 'Email d√©j√† utilis√© par un autre utilisateur',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© - R√¥le Admin requis',
  })
  async update(
    @Param('id') id: string,
    @Body() updateUserDto: UpdateUserDto,
  ): Promise<UserResponseDto> {
    return this.usersService.update(id, updateUserDto);
  }

  @Delete(':id')
  @Permissions.Users.Delete()
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: 'Supprimer un utilisateur',
    description: `
üîí **Permission requise** : Lecture des utilisateurs

‚ö†Ô∏è **Action irr√©versible** - Supprime d√©finitivement un utilisateur et toutes ses donn√©es.

**Cas d'usage :**
- Nettoyage des comptes inactifs
- Suppression de comptes frauduleux
- Conformit√© RGPD (droit √† l'oubli)

**Recommandation :** Pr√©f√©rer la suspension √† la suppression d√©finitive.
    `,
  })
  @ApiResponse({
    status: 204,
    description: 'Utilisateur supprim√© avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur non trouv√©',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© - R√¥le Admin requis',
  })
  async remove(@Param('id') id: string): Promise<void> {
    return this.usersService.remove(id);
  }
}
