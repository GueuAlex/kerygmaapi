import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  ParseIntPipe,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
} from '@nestjs/swagger';
import { RolesService } from './roles.service';
import { CreateRoleDto } from './dto/create-role.dto';
import { UpdateRoleDto } from './dto/update-role.dto';
import { RoleResponseDto, UserRolesResponseDto } from './dto/role-response.dto';
import { Roles } from '../../auth/decorators/roles.decorator';

@ApiTags('Gestion des R√¥les et Permissions')
@ApiBearerAuth('JWT-auth')
@Controller('roles')
export class RolesController {
  constructor(private readonly rolesService: RolesService) {}

  @Post('seed')
  @Roles('admin')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Initialiser les r√¥les par d√©faut',
    description: `
üîí **Endpoint prot√©g√©** - R√©serv√© aux administrateurs

Cr√©e les r√¥les par d√©faut du syst√®me avec leurs permissions :
- **super_admin** : Tous les droits
- **parish_priest** : Cur√© de paroisse
- **treasurer** : Tr√©sorier
- **secretary** : Secr√©taire
- **basic_user** : Utilisateur de base

**S√©curit√© :** Ne cr√©e que les r√¥les qui n'existent pas encore.
    `,
  })
  @ApiResponse({
    status: 201,
    description: 'R√¥les par d√©faut cr√©√©s avec succ√®s',
    type: [RoleResponseDto],
  })
  async seedDefaultRoles(): Promise<RoleResponseDto[]> {
    return this.rolesService.seedDefaultRoles();
  }

  @Get()
  @Roles('admin', 'priest')
  @ApiOperation({
    summary: 'Liste de tous les r√¥les',
    description: `
üîí **Endpoint prot√©g√©** - Accessible aux admins et pr√™tres

Retourne la liste compl√®te des r√¥les disponibles avec leurs permissions.

**Cas d'usage :**
- Interface d'administration des r√¥les
- S√©lection de r√¥les lors de l'assignation
- Audit des permissions du syst√®me
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Liste des r√¥les r√©cup√©r√©e avec succ√®s',
    type: [RoleResponseDto],
  })
  async findAllRoles(): Promise<RoleResponseDto[]> {
    return this.rolesService.findAllRoles();
  }

  @Get(':id')
  @Roles('admin', 'priest')
  @ApiParam({
    name: 'id',
    description: 'ID du r√¥le',
    example: 1,
  })
  @ApiOperation({
    summary: 'D√©tails d\'un r√¥le sp√©cifique',
    description: `
üîí **Endpoint prot√©g√©** - Accessible aux admins et pr√™tres

Retourne les d√©tails complets d'un r√¥le avec toutes ses permissions.
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'D√©tails du r√¥le r√©cup√©r√©s avec succ√®s',
    type: RoleResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'R√¥le non trouv√©',
  })
  async findRoleById(@Param('id', ParseIntPipe) id: number): Promise<RoleResponseDto> {
    return this.rolesService.findRoleById(id);
  }

  @Post()
  @Roles('admin')
  @ApiOperation({
    summary: 'Cr√©er un nouveau r√¥le',
    description: `
üîí **Endpoint prot√©g√©** - R√©serv√© aux administrateurs

Cr√©e un nouveau r√¥le personnalis√© avec ses permissions sp√©cifiques.

**Structure des permissions :**
\`\`\`json
{
  "resource_name": ["action1", "action2"],
  "finances": ["read", "write"],
  "users": ["read"],
  "*": ["*"]  // Super admin (tous droits)
}
\`\`\`

**Actions courantes :** read, write, delete, *
    `,
  })
  @ApiResponse({
    status: 201,
    description: 'R√¥le cr√©√© avec succ√®s',
    type: RoleResponseDto,
  })
  @ApiResponse({
    status: 409,
    description: 'Un r√¥le avec ce nom existe d√©j√†',
  })
  async createRole(@Body() createRoleDto: CreateRoleDto): Promise<RoleResponseDto> {
    return this.rolesService.createRole(createRoleDto);
  }

  @Put(':id')
  @Roles('admin')
  @ApiParam({
    name: 'id',
    description: 'ID du r√¥le √† modifier',
    example: 1,
  })
  @ApiOperation({
    summary: 'Modifier un r√¥le existant',
    description: `
üîí **Endpoint prot√©g√©** - R√©serv√© aux administrateurs

Modifie les propri√©t√©s d'un r√¥le existant (nom, description, permissions).

**Note :** La modification des permissions affecte imm√©diatement tous les utilisateurs ayant ce r√¥le.
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'R√¥le modifi√© avec succ√®s',
    type: RoleResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'R√¥le non trouv√©',
  })
  @ApiResponse({
    status: 409,
    description: 'Le nouveau nom de r√¥le existe d√©j√†',
  })
  async updateRole(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateRoleDto: UpdateRoleDto,
  ): Promise<RoleResponseDto> {
    return this.rolesService.updateRole(id, updateRoleDto);
  }

  @Delete(':id')
  @Roles('admin')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiParam({
    name: 'id',
    description: 'ID du r√¥le √† supprimer',
    example: 1,
  })
  @ApiOperation({
    summary: 'Supprimer un r√¥le',
    description: `
üîí **Endpoint prot√©g√©** - R√©serv√© aux administrateurs

Supprime d√©finitivement un r√¥le et toutes ses assignations.

**‚ö†Ô∏è Attention :** Cette action est irr√©versible et retire le r√¥le de tous les utilisateurs qui l'avaient.
    `,
  })
  @ApiResponse({
    status: 204,
    description: 'R√¥le supprim√© avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'R√¥le non trouv√©',
  })
  async deleteRole(@Param('id', ParseIntPipe) id: number): Promise<void> {
    return this.rolesService.deleteRole(id);
  }

  @Get(':id/permissions')
  @Roles('admin', 'priest')
  @ApiParam({
    name: 'id',
    description: 'ID du r√¥le',
    example: 1,
  })
  @ApiOperation({
    summary: 'Permissions d√©taill√©es d\'un r√¥le',
    description: `
üîí **Endpoint prot√©g√©** - Accessible aux admins et pr√™tres

Retourne uniquement les permissions d'un r√¥le sp√©cifique dans un format d√©taill√©.

**Utile pour :**
- Audit des permissions
- Interface de modification des droits
- V√©rification des acc√®s
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Permissions du r√¥le r√©cup√©r√©es avec succ√®s',
    example: {
      finances: ['read', 'write'],
      users: ['read'],
      reports: ['read', 'write']
    },
  })
  @ApiResponse({
    status: 404,
    description: 'R√¥le non trouv√©',
  })
  async getRolePermissions(@Param('id', ParseIntPipe) id: number): Promise<Record<string, any>> {
    const role = await this.rolesService.findRoleById(id);
    return role.permissions || {};
  }

  @Post('users/:userId/roles/:roleId')
  @Roles('admin')
  @HttpCode(HttpStatus.CREATED)
  @ApiParam({
    name: 'userId',
    description: 'ID de l\'utilisateur',
    example: 'uuid-1234-5678-9012',
  })
  @ApiParam({
    name: 'roleId',
    description: 'ID du r√¥le √† assigner',
    example: 1,
  })
  @ApiOperation({
    summary: 'Assigner un r√¥le √† un utilisateur',
    description: `
üîí **Endpoint prot√©g√©** - R√©serv√© aux administrateurs

Assigne un r√¥le sp√©cifique √† un utilisateur.

**Fonctionnement :**
- Un utilisateur peut avoir plusieurs r√¥les
- Les permissions se cumulent entre les r√¥les
- L'assignation est imm√©diate
    `,
  })
  @ApiResponse({
    status: 201,
    description: 'R√¥le assign√© avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur ou r√¥le non trouv√©',
  })
  @ApiResponse({
    status: 409,
    description: 'Ce r√¥le est d√©j√† assign√© √† cet utilisateur',
  })
  async assignRoleToUser(
    @Param('userId') userId: string,
    @Param('roleId', ParseIntPipe) roleId: number,
  ): Promise<{ message: string }> {
    await this.rolesService.assignRoleToUser(userId, roleId);
    return { message: 'R√¥le assign√© avec succ√®s' };
  }

  @Delete('users/:userId/roles/:roleId')
  @Roles('admin')
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiParam({
    name: 'userId',
    description: 'ID de l\'utilisateur',
    example: 'uuid-1234-5678-9012',
  })
  @ApiParam({
    name: 'roleId',
    description: 'ID du r√¥le √† retirer',
    example: 1,
  })
  @ApiOperation({
    summary: 'Retirer un r√¥le d\'un utilisateur',
    description: `
üîí **Endpoint prot√©g√©** - R√©serv√© aux administrateurs

Retire un r√¥le sp√©cifique d'un utilisateur.

**Note :** L'utilisateur perd imm√©diatement les permissions li√©es √† ce r√¥le.
    `,
  })
  @ApiResponse({
    status: 204,
    description: 'R√¥le retir√© avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Assignation de r√¥le non trouv√©e',
  })
  async removeRoleFromUser(
    @Param('userId') userId: string,
    @Param('roleId', ParseIntPipe) roleId: number,
  ): Promise<void> {
    return this.rolesService.removeRoleFromUser(userId, roleId);
  }

  @Get('users/:userId/roles')
  @Roles('admin', 'priest')
  @ApiParam({
    name: 'userId',
    description: 'ID de l\'utilisateur',
    example: 'uuid-1234-5678-9012',
  })
  @ApiOperation({
    summary: 'R√¥les d\'un utilisateur',
    description: `
üîí **Endpoint prot√©g√©** - Accessible aux admins et pr√™tres

Retourne tous les r√¥les assign√©s √† un utilisateur sp√©cifique.
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'R√¥les de l\'utilisateur r√©cup√©r√©s avec succ√®s',
    type: [RoleResponseDto],
  })
  async getUserRoles(@Param('userId') userId: string): Promise<RoleResponseDto[]> {
    return this.rolesService.getUserRoles(userId);
  }

  @Get('users/:userId/permissions')
  @Roles('admin', 'priest')
  @ApiParam({
    name: 'userId',
    description: 'ID de l\'utilisateur',
    example: 'uuid-1234-5678-9012',
  })
  @ApiOperation({
    summary: 'Permissions effectives d\'un utilisateur',
    description: `
üîí **Endpoint prot√©g√©** - Accessible aux admins et pr√™tres

Calcule et retourne toutes les permissions effectives d'un utilisateur.

**Fonctionnement :**
- Fusionne les permissions de tous les r√¥les de l'utilisateur
- √âlimine les doublons
- Retourne le r√©sultat consolid√©

**Utile pour :**
- V√©rification des droits d'acc√®s
- Interface utilisateur adaptative
- Audit de s√©curit√©
    `,
  })
  @ApiResponse({
    status: 200,
    description: 'Permissions effectives calcul√©es avec succ√®s',
    type: UserRolesResponseDto,
  })
  async getUserPermissions(@Param('userId') userId: string): Promise<UserRolesResponseDto> {
    const roles = await this.rolesService.getUserRoles(userId);
    const effectivePermissions = await this.rolesService.getEffectivePermissions(userId);
    
    return {
      userId,
      roles,
      effectivePermissions,
    };
  }
}
